//-----------------------------------------------------------------------------
// fps
//-----------------------------------------------------------------------------
package fps

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
import "glfw"
import "mat"
import "time"
import "uti"

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
type profile_id struct {
    profile i32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
type profile_s struct {
    name str
    id profile_id
    slot i32
    begin f64
    delta f64
    sum f64
    count f64
    min f64
    max f64
    stack i32
    offset i32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
var g_profiles[256]profile_s
var g_profileCount i32 = 0
var g_profileStack i32 = 0

var g_profileTree[2048]profile_id
var g_profileTreeCount i32 = 0

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
type fps_s struct {
    currentTime f64
    previousTime f64
    deltaTime f64
    fpsTime f64
    frameTime f64
    fps f64
    init bool
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func delta_time(fps *fps_s) (value f64) { // ##2 issue workaround
    value = (*fps).deltaTime
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func init(targetFps f64)(out fps_s) {
    out.currentTime = glfw.GetTime()
    out.previousTime = out.currentTime
    out.deltaTime = 0.0D
    out.fpsTime = 0.0D
    out.frameTime = 0.0D
    if targetFps > 0.0D {
            printf("TARGET_FPS\n")
        out.frameTime = 1.0D / targetFps
    }
    out.fps = 0.0D
    out.init = true
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func begin_update(in fps_s) (out fps_s) {

    out = in
    out.currentTime = glfw.GetTime()
    out.deltaTime = out.currentTime - out.previousTime
    if (out.init == true) {
        out.init = false
        out.deltaTime = out.frameTime
    }

    var full bool = false
    var i i32 = 0
    if out.currentTime - out.fpsTime > 1.0D {
        out.fpsTime = out.currentTime
        printf("//-----------------------------------------------------------------------------\n")
    printf("fps : %d\n", f64.i32(out.fps))
        out.fps = 0.0D
        full = true
        for i = 0; i < g_profileTreeCount; i = i + 1 {
            print_profile(g_profileTree[i])
        }

    } else {
        out.fps = out.fps + 1.0D;
    }


    g_profileTreeCount = 0
   for i = 0; i < g_profileCount; i = i + 1 {
        clear_profile(g_profiles[i].id, full)
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func end_update(in fps_s) (out fps_s) {
    out = in

    if out.frameTime > 0.0 {
        var updateTime f64 = glfw.GetTime()
        var    deltaUpdateTime f64 = updateTime - out.currentTime;
        if (deltaUpdateTime < out.frameTime) {
            time.Sleep(f64.i32(1000.0D * (out.frameTime - deltaUpdateTime)))
        }
    }

    out.previousTime = out.currentTime
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func create_profile(name str) (out profile_id) {
    printf("create_profile %s\n", name)
 out.profile = g_profileCount
    var i i32 = 0
    for i = 0; i < g_profileCount; i = i + 1 {
        var profileName str = g_profiles[i].name
        //printf("comparing %s -> %s\n", name, profileName)
        if (name == profileName) {
            //printf("duplicate entry\n")
            out.profile = -1
            i = g_profileCount
            uti.assert_(false, "create_profile : duplicate entry")
        }
    }

    if (out.profile >= 0) {
        g_profiles[g_profileCount].id = out
        g_profiles[g_profileCount].name = name
        g_profileCount = g_profileCount + 1
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func is_valid_profile(id profile_id) (out bool) {
    out = id.profile >= 0 && id.profile < g_profileCount
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func clear_profile(id profile_id, full bool) {
    uti.assert_(is_valid_profile(id), "clear_profile : invalid id")
    g_profiles[id.profile].begin = 0.0D
    g_profiles[id.profile].delta = 0.0D
    g_profiles[id.profile].slot = -1
    if (full == true) {
        g_profiles[id.profile].sum = 0.0D
        g_profiles[id.profile].count = 0.0D
        g_profiles[id.profile].max = mat.F64_MIN
        g_profiles[id.profile].min = mat.F64_MAX
    }
    var stack i32 = g_profiles[id.profile].stack
    uti.assert_(stack == 0, "clear_profile : invalid stack")
    g_profiles[id.profile].stack = 0
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func print_profile(id profile_id) {
    uti.assert_(is_valid_profile(id), "print_profile : invalid id")
    var cur f64 = g_profiles[id.profile].delta
    var count f64 = g_profiles[id.profile].count
    var sum f64 = g_profiles[id.profile].sum
    var avg f64 = sum / count
    var min f64 = g_profiles[id.profile].min
    var max f64 = g_profiles[id.profile].max
    var name str = g_profiles[id.profile].name
    var offset i32 = g_profiles[id.profile].offset
    if (count > 0) {
        if (offset > 0) {
            var i i32 = 0
            for i = 0; i < offset; i = i + 1 {
                printf("----")
            }
            printf(" ")
        }

        printf("%s - #%d, cur %f, avg %f, min %f, max %f\n",
            name,
            f64.i32(count),
            f64.f32(cur * 1000.0D),
            f64.f32(avg * 1000.0D),
            f64.f32(min * 1000.0D),
            f64.f32(max * 1000.0D))
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func begin_profile(id profile_id) () {
    uti.assert_(is_valid_profile(id), "begin_profile : invalid id")
    g_profiles[id.profile].begin = glfw.GetTime()
    var stack i32 = g_profiles[id.profile].stack
    g_profiles[id.profile].stack = stack + 1
    g_profiles[id.profile].offset = g_profileStack
    g_profileStack = g_profileStack + 1

    var treeIndex i32 = g_profiles[id.profile].slot
    if (treeIndex <= -1) {
        g_profileTree[g_profileTreeCount] = id
        g_profiles[id.profile].slot = g_profileTreeCount
        g_profileTreeCount = g_profileTreeCount + 1
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func end_profile(id profile_id) {
    uti.assert_(is_valid_profile(id), "end_profile : invalid id")
    var end f64 = glfw.GetTime()
    var begin f64 = g_profiles[id.profile].begin
    var delta f64 = end - begin
    var sum f64 = g_profiles[id.profile].sum
    var count f64 = g_profiles[id.profile].count
    var max f64 = g_profiles[id.profile].max
    var min f64 = g_profiles[id.profile].min
    var stack i32 = g_profiles[id.profile].stack
    var previous f64 = g_profiles[id.profile].delta
    g_profiles[id.profile].delta = previous + delta
    g_profiles[id.profile].sum = sum + delta
    g_profiles[id.profile].count = count + 1.0D
    g_profiles[id.profile].max = mat.max_f64(max, delta)
    g_profiles[id.profile].min = mat.min_f64(min, delta)
    uti.assert_(stack > 0, "end_profile : invalid stack")
    g_profiles[id.profile].stack = stack - 1
    uti.assert_(g_profileStack > 0, "end_profile : invalid stack")
    g_profileStack = g_profileStack - 1
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

