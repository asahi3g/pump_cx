//-----------------------------------------------------------------------------
// pump-cx
//-----------------------------------------------------------------------------
package main
import "app"
import "fps"
import "gfx"
import "gl"
import "gltext"
import "gui"
import "mat"
import "uti"


//-----------------------------------------------------------------------------
// CX_BUGS
//-----------------------------------------------------------------------------
// implicit cast ui32 -> i32
// printf %d ui32
// pointers
// assert doesn't stop program execution
// multiline array init
// inline array init
// inline string init
// if b {} else {} unexpected ELSE
// for true { return false }
// if glerror == 0 { break } unexpected RBRACE
///    gui.g_skycoinTexture, -1, mat.v4_(0.0, 0.0, 1.16, 1.16), 0, gui.ALIGN_CENTER, 0).control) // ##issue_59 issue


//-----------------------------------------------------------------------------
// PUMPCX BUGS
//-----------------------------------------------------------------------------
// fix crash when deleting programs
// fix lag at startup (shader creation ?)
// flickering screen when on_exit during the boot sequence

//-----------------------------------------------------------------------------
// TODO
//-----------------------------------------------------------------------------
// release fonts
// terminate glfw
// random func : i32.rand(0,2)
// skycoin fonts
// rewrite screen creationg
// effects
// center window at creation
// cli params (width, height, fullscreen, vsync)

//-----------------------------------------------------------------------------
// DONE
//-----------------------------------------------------------------------------
// split main.cx -> app.cx, fps.cx, gfx.cx, gui.cx
// skycoin colors
// gfx : state cache
// remove gl from main

//-----------------------------------------------------------------------------
// main
//-----------------------------------------------------------------------------
// rewrite screen init
var g_bootScreen     gui.screen_id = gui.invalid_screen()
var g_debugScreen    gui.screen_id = gui.invalid_screen()
var g_skycoinScreen  gui.screen_id = gui.invalid_screen()
var g_pumpcxScreen   gui.screen_id = gui.invalid_screen()
var g_mainScreen     gui.screen_id = gui.invalid_screen()
var g_gameScreen     gui.screen_id = gui.invalid_screen()
var g_exitAppScreen  gui.screen_id = gui.invalid_screen()
var g_exitGameScreen gui.screen_id = gui.invalid_screen()
var g_pauseScreen    gui.screen_id = gui.invalid_screen()

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func on_exit_app_window_no_state(controlIndex i32, action i32) {
    var id gui.control_id = gui.control_id_(controlIndex)

    // close dialog
    if (action == gui.KEY_PRESS) {
        printf("NO PRESSED\n")
    } else if (action == gui.KEY_RELEASE) {
        printf("NO RELEASED\n")
        gui.hide_modal(g_exitAppScreen)
    } else if (action == gui.KEY_REPEAT) {
        printf("NO REPEAT\n")
    } else {
        uti.assert_(false, "on_exit_app_window_no_state : invalid action")
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func on_exit_app_window_yes_state(controlIndex i32, action i32) {
    var id gui.control_id = gui.control_id_(controlIndex)

    // terminate
    if (action == gui.KEY_PRESS) {
        printf("YES PRESSED\n")
    } else if (action == gui.KEY_RELEASE) {
        printf("YES RELEASED\n")
        gui.hide_modal(g_exitAppScreen)
        app.exit()
    } else if (action == gui.KEY_REPEAT) {
        printf("YES REPEAT\n")
    } else {
        uti.assert_(false, "on_exit_app_window_yes_state : invalid action")
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func add_percent(id control_id, focusIndex i32) {
    var line control_id = gui.control_create("label_text")
    gui.control_add_child(id, line)
    gui.control_set_autosize(line, gui.AUTOSIZE_Y)
    gui.control_set_padding(line, mat.v4_(3.0, 3.0, 3.0, 3.0))
    gui.control_set_dock(line, gui.DOCK_BOTTOM)
    gui.control_set_focus_index(line, focusIndex)

    var i i32 = 0
    var labels [4]str
    labels = [4]str{
        "25%",
        "50%",
        "75%",
        "100%" }

    for i = 0; i < 4; i = i + 1 {
        var textLabel label_id = gui.label_create(labels[i])
        gui.control_add_child(line, textLabel.base)
        gui.control_set_skin(textLabel.base, gui.g_textboxSkin)
        gui.control_set_dock(textLabel.base, gui.DOCK_LEFT)
        gui.control_set_autosize(textLabel.base, gui.AUTOSIZE_Y)
        gui.control_set_padding(textLabel.base, mat.v4_(3.0, 3.0, 3.0, 3.0))
        gui.control_set_size(textLabel.base, mat.v2_(55.0, 0.0))
        gui.control_set_focusable(textLabel.base, 1)
        gui.label_set_font(textLabel, gui.g_boldFont)
        gui.label_set_text(textLabel, labels[i])
        gui.label_set_size(textLabel, gui.g_fontSizeSmall)
        gui.label_set_color(textLabel, gui.g_gray_4)
        gui.label_set_align(textLabel, gui.ALIGN_CENTER)
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func add_label_text(id control_id, label str, text str, focusIndex i32) {
    var line control_id = gui.control_create("label_text")
    gui.control_add_child(id, line)
    gui.control_set_autosize(line, gui.AUTOSIZE_Y)
    gui.control_set_padding(line, mat.v4_(3.0, 3.0, 3.0, 3.0))
    gui.control_set_dock(line, gui.DOCK_BOTTOM)
    gui.control_set_focus_index(line, focusIndex)

    var textLabel label_id = gui.label_create(sprintf("textbox_%s", label))
    gui.control_add_child(line, textLabel.base)
    gui.control_set_skin(textLabel.base, gui.g_textboxSkin)
    gui.control_set_dock(textLabel.base, gui.DOCK_RIGHT)
    gui.control_set_autosize(textLabel.base, gui.AUTOSIZE_Y)
    gui.control_set_size(textLabel.base, mat.v2_(100.0, 0.0))
    gui.control_set_focusable(textLabel.base, 1)
    gui.label_set_font(textLabel, gui.g_boldFont)
    gui.label_set_text(textLabel, text)
    gui.label_set_size(textLabel, gui.g_fontSizeSmall)
    gui.label_set_color(textLabel, gui.g_gray_4)
    gui.label_set_align(textLabel, gui.ALIGN_CENTER)

    var captionLabel label_id = gui.label_create(sprintf("caption_%s", label))
    gui.control_add_child(line, captionLabel.base)
    gui.control_set_dock(captionLabel.base, gui.DOCK_RIGHT)
    gui.control_set_autosize(captionLabel.base, gui.AUTOSIZE)
    gui.label_set_font(captionLabel, gui.g_boldFont)
    gui.label_set_text(captionLabel, label)
    gui.label_set_size(captionLabel, gui.g_fontSizeSmall)
    gui.label_set_color(captionLabel, gui.g_gray_4)
    gui.label_set_align(captionLabel, gui.ALIGN_CENTER)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func main() {

    var targetFps f64 = 60.0D

    var application str // ##pending inline string init
    application = "window"
    app.init(application, "pumpcx", 1600, 1200, targetFps, 2, 1, "main.keyPressed")
    gfx.init(app.app_width, app.app_height)
    gui.init()

    var screenBounds mat.v4 = gfx.gfx_viewport_bounds
    var screenSize mat.v2 = gfx.gfx_viewport_size

    // exit app screen
    {
        g_exitAppScreen = gui.screen_create("exit_app")
        gui.control_set_skin(g_exitAppScreen.base, gui.g_modalSkin)
        gui.control_set_bounds(g_exitAppScreen.base, screenBounds)
        gui.screen_set_duration(g_exitAppScreen, -2.0D)
        gui.screen_set_modal(g_exitAppScreen, true)

        {
            var window gui.window_id = gui.window_create("exit_app_window") // ##pending window vs window at main scope
            gui.control_add_child(g_exitAppScreen.base, window.base)
            gui.control_set_skin(window.base, gui.g_windowSkin)
            //gui.control_set_padding(window.base, mat.v4_(0.1, 0.1, 0.1, 0.1))
            gui.control_set_autosize(window.base, gui.AUTOSIZE)
            gui.control_set_align(window.base, gui.ALIGN_CENTER)
            gui.window_set_caption(window, "pumpcx")
            gui.window_add_button(window, "no", "No", "main", "on_exit_app_window_no_state")
            gui.window_add_button(window, "yes", "Yes", "main", "on_exit_app_window_yes_state")

            {
                var text gui.label_id = gui.label_create("exit_app_label")
                gui.window_set_containee(window, text.base)
                //gui.control_set_skin(text.base, gui.g_primaryBlueSkin)
                gui.control_set_dock(text.base, gui.DOCK_FILL)
                gui.control_set_autosize(text.base, gui.AUTOSIZE)
                gui.label_set_font(text, gui.g_regularFont)
                gui.label_set_text(text, "Do you really want to dumpcx ?")
                gui.label_set_size(text, gui.g_fontSizeText)
                gui.label_set_color(text, gui.g_white)
                gui.label_set_align(text, gui.ALIGN_CENTER)
            }
        }
    }

    // exit game screen
    {
        g_exitGameScreen = gui.screen_create("exit_game")
        gui.control_set_skin(g_exitGameScreen.base, gui.g_modalSkin)
        gui.control_set_bounds(g_exitGameScreen.base, screenBounds)
        gui.screen_set_duration(g_exitGameScreen, -2.0D)
        gui.screen_set_modal(g_exitGameScreen, true)

        {
            var window gui.window_id = gui.window_create("exit_game_window")
            gui.control_add_child(g_exitGameScreen.base, window.base)
            gui.control_set_skin(g_exitGameScreen.base, gui.g_windowSkin)
            gui.control_set_bounds(window.base, mat.v4_(-0.5, -0.5, 1.0, 1.0))
            //gui.control_set_autosize(window.base, gui.AUTOSIZE)
            gui.control_set_align(window.base, gui.ALIGN_CENTER)
            gui.window_set_caption(window, "pumpcx")
        }
    }

    // pause screen
    {
        g_pauseScreen = gui.screen_create("pause")
        gui.control_set_skin(g_pauseScreen.base, gui.g_modalSkin)
        gui.control_set_bounds(g_pauseScreen.base, screenBounds)
        gui.screen_set_duration(g_pauseScreen, -2.0D)
        gui.screen_set_modal(g_pauseScreen, true)

        {
            var window gui.window_id = gui.window_create("pause")
            gui.control_add_child(g_pauseScreen.base, window.base)
            gui.control_set_skin(g_pauseScreen.base, gui.g_windowSkin)
            gui.control_set_bounds(window.base, mat.v4_(-0.5, -0.5, 1.0, 1.0))
            gui.control_set_autosize(window.base, gui.AUTOSIZE)
            gui.control_set_align(window.base, gui.ALIGN_CENTER)
            gui.window_set_caption(window, "pumpcx")
        }
    }


    // game screen
    {
        g_gameScreen = gui.screen_create("game")
        gui.control_set_skin(g_gameScreen.base, gui.g_blackSkin)
        gui.control_set_bounds(g_gameScreen.base, screenBounds)
        gui.control_set_padding(g_gameScreen.base, mat.v4_(0.08, 0.08, 0.08, 0.08))
        gui.screen_set_duration(g_gameScreen, -2.0D)
        gui.screen_set_on_enter(g_gameScreen, g_pauseScreen)
        gui.screen_set_on_exit(g_gameScreen, g_exitGameScreen)
        gui.screen_set_on_menu(g_gameScreen, g_pauseScreen)

        {
            var partition partition_id = gui.create_partition("partition")
            gui.control_add_child(g_gameScreen.base, partition.base)
            gui.control_set_skin(partition.base, gui.g_blackSkin)
            gui.control_set_size(partition.base, mat.v2_(0.0, 0.2))
            gui.control_set_dock(partition.base, gui.DOCK_TOP)
        }

        {
            var keyboard keyboard_id = gui.create_keyboard("keyboard")
            gui.control_add_child(g_gameScreen.base, keyboard.base)
            gui.control_set_skin(keyboard.base, gui.g_blackSkin)
            gui.control_set_size(keyboard.base, mat.v2_(0.0, 0.3))
            gui.control_set_align(keyboard.base, gui.ALIGN_HORZ_BOTTOM)
        }
    }

    var columnSize i32 = gui.g_fontSizeSmall
    var itemSize i32 = gui.g_fontSizeSmall

    // main screen
    {
        g_mainScreen = gui.screen_create("main")
        gui.control_set_bounds(g_mainScreen.base, screenBounds)
        gui.control_set_padding(g_mainScreen.base, gui.g_padding)
        gui.screen_set_duration(g_mainScreen, -2.0D)
        gui.screen_set_on_next(g_mainScreen, g_gameScreen)
        gui.screen_set_on_enter(g_mainScreen, g_gameScreen)
        gui.screen_set_on_exit(g_mainScreen, g_exitAppScreen)
        gui.screen_set_on_menu(g_mainScreen, g_pauseScreen)

        {
            var control control_id = gui.control_create("toolbar")
            gui.control_add_child(g_mainScreen.base, control)
            gui.control_set_padding(control, mat.v4_(5.0, 3.0, 10.0, 3.0))
            gui.control_set_skin(control, gui.g_blackSkin)
            gui.control_set_autosize(control, gui.AUTOSIZE_Y)
            gui.control_set_dock(control, gui.DOCK_TOP)

            var icon label_id = gui.label_create("icon")
            gui.control_add_child(control, icon.base)
            gui.control_set_dock(icon.base, gui.DOCK_LEFT)
            gui.control_set_padding(icon.base, mat.v4_(10.0, 0.0, 0.0, 0.0))
            gui.control_set_autosize(icon.base, gui.AUTOSIZE_X)
            gui.label_set_color(icon, gui.g_gold)
            gui.label_set_rune(icon, 388)
            gui.label_set_size(icon, gui.g_fontSizeHeader)
            gui.label_set_align(icon, gui.ALIGN_CENTER)

            var logo label_id = gui.label_create("logo")
            gui.control_add_child(control, logo.base)
            gui.control_set_dock(logo.base, gui.DOCK_LEFT)
            gui.control_set_padding(logo.base, mat.v4_(0.0, 0.0, 0.0, 0.0))
            gui.control_set_autosize(logo.base, gui.AUTOSIZE)
            gui.label_set_font(logo, gui.g_boldFont)
            gui.label_set_color(logo, gui.g_gold)
            gui.label_set_text(logo, "PUMPCX")
            gui.label_set_size(logo, gui.g_fontSizeHeader)
            gui.label_set_align(logo, gui.ALIGN_CENTER)

            var date label_id = gui.label_create("date")
            gui.control_add_child(control, date.base)
            gui.control_set_dock(date.base, gui.DOCK_LEFT)
            gui.control_set_padding(date.base, mat.v4_(5.0, 0.0, 20.0, 0.0))
            gui.control_set_autosize(date.base, gui.AUTOSIZE_X)
            gui.label_set_font(date, gui.g_regularFont)
            gui.label_set_color(date, gui.g_gray_3)
            gui.label_set_text(date, "2018-11-02 12:08:42")
            gui.label_set_size(date, gui.g_fontSizeSmall)
            gui.label_set_align(date, gui.ALIGN_CENTER)

            var lang gui.combo_id = gui.combo_create("lang")
            gui.control_add_child(control, lang.base)
            gui.control_set_dock(lang.base, gui.DOCK_RIGHT)
            gui.control_set_autosize(lang.base, gui.AUTOSIZE_X)
            gui.control_set_focusable(lang.base, 1)
            gui.control_set_focus_index(lang.base, 2)
            gui.control_set_skin(lang.base, gui.g_zeroSkin)
            var langLabel gui.label_id = gui.combo_get_text(lang)
            gui.label_set_font(langLabel, gui.g_regularFont)
            gui.label_set_color(langLabel, gui.g_gray_4)
            gui.label_set_text(langLabel, "English")
            gui.label_set_size(langLabel, gui.g_fontSizeSmall)
            var langPic gui.label_id = gui.combo_get_pic(lang)
            //gui.label_set_font(langPic, gui.g_awesomeBoldFont)
            gui.label_set_color(langPic, g_white)
            gui.label_set_rune(langPic, 171)
            gui.label_set_size(langPic, gui.g_fontSizeText)
            var langList gui.list_id = gui.combo_get_list(lang)
            gui.list_add_column(langList, "P", gui.g_white, columnSize)
            gui.list_add_column(langList, "L", gui.g_white, columnSize)
            {
                var line gui.control_id = gui.list_add_line(langList)
                //gui.list_line_add_label(line, "E", gui.ALIGN_RIGHT, gui.g_red, itemSize)
                gui.list_line_add_picture(line, gui.ALIGN_CENTER, gui.g_USTexture)
                gui.list_line_add_label(line, "US", gui.ALIGN_CENTER, gui.g_white, itemSize, gui.invalid_skin())
            }
            {
                var line gui.control_id = gui.list_add_line(langList)
                //gui.list_line_add_label(line, "F", gui.ALIGN_RIGHT, gui.g_green, itemSize)
                gui.list_line_add_picture(line, gui.ALIGN_CENTER, gui.g_BRTexture)
                gui.list_line_add_label(line, "BR", gui.ALIGN_CENTER, gui.g_white, itemSize, gui.invalid_skin())
            }
            {
                var line gui.control_id = gui.list_add_line(langList)
                //gui.list_line_add_label(line, "F", gui.ALIGN_RIGHT, gui.g_green, itemSize)
                gui.list_line_add_picture(line, gui.ALIGN_CENTER, gui.g_JPTexture)
                gui.list_line_add_label(line, "JP", gui.ALIGN_CENTER, gui.g_white, itemSize, gui.invalid_skin())
            }


            var user combo_id = gui.combo_create("user")
            gui.control_add_child(control, user.base)
            gui.control_set_dock(user.base, gui.DOCK_RIGHT)
            gui.control_set_autosize(user.base, gui.AUTOSIZE_X)
            gui.control_set_focusable(user.base, 1)
            gui.control_set_focus_index(user.base, 1)
            gui.control_set_skin(user.base, gui.g_zeroSkin)
            var userLabel label_id = gui.combo_get_text(user)
            gui.label_set_font(userLabel, gui.g_regularFont)
            gui.label_set_color(userLabel, gui.g_gray_3)
            gui.label_set_text(userLabel, "Asahi3g")
            gui.label_set_size(userLabel, gui.g_fontSizeSmall)
            var userPic gui.label_id = gui.combo_get_pic(user)
            //gui.label_set_font(userPic, gui.g_awesomeBoldFont)
            gui.label_set_color(userPic, gui.g_white)
            gui.label_set_rune(userPic, 6)
            gui.label_set_size(userPic, gui.g_fontSizeText)

            var pair gui.combo_id = gui.combo_create("pair")
            gui.control_add_child(control, pair.base)
            gui.control_set_dock(pair.base, gui.DOCK_RIGHT)
            gui.control_set_autosize(pair.base, gui.AUTOSIZE_X)
            gui.control_set_focusable(pair.base, 1)
            gui.control_set_focus_index(pair.base, 0)
            gui.control_set_skin(pair.base, gui.g_zeroSkin)
            var pairLabel gui.label_id = gui.combo_get_text(pair)
            gui.label_set_font(pairLabel, gui.g_boldFont)
            gui.label_set_color(pairLabel, gui.g_gray_4)
            gui.label_set_text(pairLabel, "PCX / SYN")
            gui.label_set_size(pairLabel, gui.g_fontSizeText)
            var pairPic gui.label_id = gui.combo_get_pic(pair)
            //gui.label_set_font(pairPic, gui.g_awesomeBoldFont)
            gui.label_set_color(pairPic, gui.g_white)
            gui.label_set_rune(pairPic, 282)
            gui.label_set_size(pairPic, gui.g_fontSizeText)

        }

        {
            var panel control_id = gui.control_create("panel")
            gui.control_add_child(g_mainScreen.base, panel)
            gui.control_set_padding(panel, mat.v4_(0.0, 0.0, 3.0, 0.0))
            gui.control_set_dock(panel, gui.DOCK_FILL)

            {
                var right splitter_id = gui.splitter_create("right")
                gui.control_add_child(panel, right.base)
                gui.control_set_size(right.base, mat.v2_(500.0, 0.0))
                gui.control_set_dock(right.base, gui.DOCK_RIGHT)
                gui.control_set_spacing(right.base, gui.g_spacing_x)
                gui.control_set_focus_index(right.base, 1)
                gui.splitter_set_direction(right, gui.SPLIT_BOTTOM)


                var rightBottom splitter_id = gui.splitter_create("rightBottom")
                var rightTop splitter_id = gui.splitter_create("rightTop")
                gui.splitter_set_controls(right, rightBottom.base, rightTop.base)
                gui.control_set_focus_index(rightTop.base, 0)
                gui.control_set_focus_index(rightBottom.base, 1)
                {
                    gui.control_set_size(rightBottom.base, mat.v2_(0.0, 400.0))
                    gui.control_set_dock(rightBottom.base, gui.DOCK_BOTTOM)
                    gui.control_set_spacing(rightBottom.base, gui.g_spacing_y)
                    gui.splitter_set_direction(rightBottom, gui.SPLIT_BOTTOM)

                    {
                        var rightBottomPlayControl control_id = gui.control_create("rightBottomPlayCtrl")
                        gui.control_set_dock(rightBottomPlayControl, gui.DOCK_BOTTOM)
                        gui.control_set_autosize(rightBottomPlayControl, AUTOSIZE_Y)
                        gui.control_set_padding(rightBottomPlayControl, mat.v4_(10.0, 10.0, 10.0, 10.0))
                        gui.control_set_skin(rightBottomPlayControl, gui.g_blackSkin)


                        var playButton label_id = gui.label_create("playButton")
                        gui.control_add_child(rightBottomPlayControl, playButton.base)
                        gui.control_set_skin(playButton.base, gui.g_blueSkin)
                        gui.control_set_dock(playButton.base, gui.DOCK_BOTTOM)
                        gui.control_set_focusable(playButton.base, 1)
                        gui.control_set_padding(playButton.base, mat.v4_(5.0, 5.0, 5.0, 5.0))
                        gui.control_set_autosize(playButton.base, AUTOSIZE_Y)
                        gui.label_set_font(playButton, gui.g_boldFont)
                        gui.label_set_text(playButton, "Play")
                        gui.label_set_size(playButton, gui.g_fontSizeButton)
                        gui.label_set_color(playButton, gui.g_white)
                        gui.label_set_align(playButton, gui.ALIGN_CENTER)


                        //gui.control_set_size(rightBottomPlayControl, mat.v2_(0.0, 100.0))

                        var orderType binder_id = gui.binder_create("orderType")
                        gui.control_set_dock(orderType.base, gui.DOCK_TOP)
                        {
                            var limitOrder splitter_id = gui.splitter_create("limitOrder")
                            gui.control_set_dock(limitOrder.base, gui.DOCK_TOP)
                            gui.control_set_spacing(limitOrder.base, gui.g_spacing_x)
                            gui.splitter_set_direction(limitOrder, gui.SPLIT_HORZ)

                            var bottomLeft control_id = gui.control_create("bottomLeft")
                            gui.control_set_dock(bottomLeft, gui.DOCK_LEFT)
                            //gui.control_set_skin(bottomLeft, gui.g_debugGreenSkin)
                            gui.control_set_padding(bottomLeft, mat.v4_(10.0, 10.0, 5.0, 10.0))

                            var buyButton label_id = gui.label_create("buyButton")
                            gui.control_add_child(bottomLeft, buyButton.base)
                            gui.control_set_skin(buyButton.base, gui.g_greenSkin)
                            gui.control_set_dock(buyButton.base, gui.DOCK_BOTTOM)
                            gui.control_set_focusable(buyButton.base, 1)
                            gui.control_set_focus_index(buyButton.base, 4)
                            gui.control_set_padding(buyButton.base, mat.v4_(5.0, 5.0, 5.0, 5.0))
                            gui.control_set_autosize(buyButton.base, AUTOSIZE_Y)
                            gui.label_set_font(buyButton, gui.g_boldFont)
                            gui.label_set_text(buyButton, "Buy CX")
                            gui.label_set_size(buyButton, gui.g_fontSizeButton)
                            gui.label_set_color(buyButton, gui.g_white)
                            gui.label_set_align(buyButton, gui.ALIGN_CENTER)

                            add_label_text(bottomLeft , "Total:", "0.000", 3)
                            add_percent(bottomLeft, 2)
                            add_label_text(bottomLeft, "Amount:", "0.000", 1)
                            add_label_text(bottomLeft , "Price:", "0.000", 0)

                            /*var padding control_id = gui.control_create("padding")
                            gui.control_add_child(bottomLeft, padding)
                            gui.control_set_size(padding, mat.v2_(0.0, 20.0))
                            gui.control_set_dock(padding, gui.DOCK_BOTTOM)
                            gui.control_set_skin(padding, gui.g_debugRedSkin)*/

                            var bottomRight control_id = gui.control_create("bottomRight")
                            gui.control_set_dock(bottomRight, gui.DOCK_RIGHT)
                            //gui.control_set_skin(bottomRight, gui.g_debugRedSkin)
                            gui.control_set_padding(bottomRight, mat.v4_(5.0, 10.0, 10.0, 10.0))

                            var sellButton label_id = gui.label_create("sellButton")
                            gui.control_add_child(bottomRight, sellButton.base)
                            gui.control_set_skin(sellButton.base, gui.g_redSkin)
                            gui.control_set_dock(sellButton.base, gui.DOCK_BOTTOM)
                            gui.control_set_focusable(sellButton.base, 1)
                            gui.control_set_focus_index(sellButton.base, 4)
                            gui.control_set_padding(sellButton.base, mat.v4_(5.0, 5.0, 5.0, 5.0))
                            gui.control_set_autosize(sellButton.base, AUTOSIZE_Y)
                            gui.label_set_font(sellButton, gui.g_boldFont)
                            gui.label_set_text(sellButton, "Sell CX")
                            gui.label_set_size(sellButton, gui.g_fontSizeButton)
                            gui.label_set_color(sellButton, gui.g_white)
                            gui.label_set_align(sellButton, ALIGN_CENTER)

                            add_label_text(bottomRight , "Total:", "0.000", 3)
                            add_percent(bottomRight, 2)
                            add_label_text(bottomRight, "Amount:", "0.000", 1)
                            add_label_text(bottomRight , "Price:", "0.000", 0)

                            gui.splitter_set_controls(limitOrder, bottomLeft, bottomRight)
    
                            gui.binder_add_page(orderType, "Limit", gui.g_white, gui.g_fontSizeSmall, limitOrder.base)
                        }

                        {
                            var marketOrder splitter_id = gui.splitter_create("marketOrder")
                            gui.control_set_dock(marketOrder.base, gui.DOCK_TOP)
                            gui.control_set_spacing(marketOrder.base, gui.g_spacing_x)
                            gui.splitter_set_direction(marketOrder, gui.SPLIT_HORZ)

                            var bottomLeft control_id = gui.control_create("bottomLeft")
                            gui.control_set_dock(bottomLeft, gui.DOCK_LEFT)
                            //gui.control_set_skin(bottomLeft, gui.g_debugBlueSkin)

                            var bottomRight control_id = gui.control_create("bottomRight")
                            gui.control_set_dock(bottomRight, gui.DOCK_RIGHT)
                            //gui.control_set_skin(bottomRight, gui.g_debugBlueSkin)

                            gui.splitter_set_controls(marketOrder, bottomLeft, bottomRight)
    
                            gui.binder_add_page(orderType, "Market", gui.g_white, gui.g_fontSizeSmall, marketOrder.base)
                        }

                        {
                            var stopLimitOrder splitter_id = gui.splitter_create("stopLimitOrder")
                            gui.control_set_dock(stopLimitOrder.base, gui.DOCK_TOP)
                            gui.control_set_spacing(stopLimitOrder.base, gui.g_spacing_x)
                            gui.splitter_set_direction(stopLimitOrder, gui.SPLIT_HORZ)

                            var bottomLeft control_id = gui.control_create("bottomLeft")
                            gui.control_set_dock(bottomLeft, gui.DOCK_LEFT)
                            //gui.control_set_skin(bottomLeft, gui.g_debugGoldSkin)

                            var bottomRight control_id = gui.control_create("bottomRight")
                            gui.control_set_dock(bottomRight, gui.DOCK_RIGHT)
                            //gui.control_set_skin(bottomRight, gui.g_debugGoldSkin)

                            gui.splitter_set_controls(stopLimitOrder, bottomLeft, bottomRight)
    
                            gui.binder_add_page(orderType, "Stop-Limit", gui.g_white, gui.g_fontSizeSmall, stopLimitOrder.base)
                        }
                    }

                    gui.splitter_set_controls(rightBottom, rightBottomPlayControl, orderType.base)
                    gui.control_set_focus_index(orderType.base, 0)
                    gui.control_set_focus_index(rightBottomPlayControl, 1)
                }

                {
                    var textColor mat.v4 = gui.g_gray_4
                    gui.control_set_dock(rightTop.base, gui.DOCK_TOP)
                    gui.control_set_spacing(rightTop.base, gui.g_spacing)
                    //gui.control_set_padding(rightTop.base, mat.v4_(0.0, 0.0, 0.0, 0.0))
                    gui.splitter_set_direction(rightTop, gui.SPLIT_HORZ)

                    {
                        var order gui.splitter_id = gui.splitter_create("order")
                        gui.control_set_spacing(order.base, gui.g_spacing)
                        //gui.control_set_padding(order.base, mat.v4_(0.0, 0.0, 0.0, 0.0))
                        gui.control_set_dock(order.base, gui.DOCK_LEFT)
                        gui.splitter_set_direction(order, gui.SPLIT_VERT)

                        {
                            var item i32 = 0

                            var sell gui.list_id = gui.list_create("sell")
                            gui.control_set_skin(sell.base, gui.g_blackSkin)
                            gui.control_set_dock(sell.base, gui.DOCK_TOP)
                            gui.list_add_column(sell, "Price", gui.g_white, columnSize)
                            gui.list_add_column(sell, "Amount", gui.g_white, columnSize)
                            gui.list_add_column(sell, "Total", gui.g_white, columnSize)
                            for item = 0; item < 16; item = item + 1 {
                                var line gui.control_id = gui.list_add_line(sell)
                                gui.list_line_add_label(line, "0.3", gui.ALIGN_RIGHT, gui.g_red, itemSize, gui.g_grayFocusedSkin)
                                gui.list_line_add_label(line, "0.4", gui.ALIGN_RIGHT, textColor, itemSize, gui.g_grayFocusedSkin)
                                gui.list_line_add_label(line, "0.5", gui.ALIGN_RIGHT, textColor, itemSize, gui.g_grayFocusedSkin)
                            }

                            var buy gui.list_id = gui.list_create("buy")
                            gui.control_set_skin(buy.base, gui.g_blackSkin)
                            gui.control_set_dock(buy.base, gui.DOCK_BOTTOM)
                            gui.list_add_column(buy, "Price", gui.g_white, columnSize)
                            gui.list_add_column(buy, "Amount", gui.g_white, columnSize)
                            gui.list_add_column(buy, "Total", gui.g_white, columnSize)

                            for item = 0; item < 16; item = item + 1 {
                                var line gui.control_id = gui.list_add_line(buy)
                                gui.list_line_add_label(line, "0.0", gui.ALIGN_RIGHT, gui.g_green, itemSize, gui.g_grayFocusedSkin)
                                gui.list_line_add_label(line, "0.1", gui.ALIGN_RIGHT, textColor, itemSize, gui.g_grayFocusedSkin)
                                gui.list_line_add_label(line, "0.2", gui.ALIGN_RIGHT, textColor, itemSize, gui.g_grayFocusedSkin)
                            }

                            gui.splitter_set_controls(order, sell.base, buy.base)
                        }

                        var done gui.list_id = gui.list_create("done")
                        {
                            gui.control_set_skin(done.base, gui.g_blackSkin)
                            gui.control_set_dock(done.base, gui.DOCK_RIGHT)
                            gui.list_add_column(done, "Price", gui.g_white, columnSize)
                            gui.list_add_column(done, "Amount", gui.g_white, columnSize)
                            gui.list_add_column(done, "Total", gui.g_white, columnSize)

                            for item = 0; item < 40; item = item + 1 {
                                var line gui.control_id = gui.list_add_line(done)

                                var color mat.v4 = gui.g_green
                                if ((item % 3) == 0 || (item % 5) == 0) {
                                    color = gui.g_red
                                }
                                gui.list_line_add_label(line, "0.0", gui.ALIGN_RIGHT, color, itemSize, gui.g_grayFocusedSkin)
                                gui.list_line_add_label(line, "0.1", gui.ALIGN_RIGHT, textColor, itemSize, gui.g_grayFocusedSkin)
                                gui.list_line_add_label(line, "0.2", gui.ALIGN_RIGHT, textColor, itemSize, gui.g_grayFocusedSkin)
                            }
                        }
                        gui.splitter_set_controls(rightTop, order.base, done.base)
                    }
                }
            }

            {
                var graph graph_id = gui.graph_create("graph")
                gui.control_add_child(panel, graph.base)
                gui.control_set_padding(graph.base, mat.v4_(0.0, 3.0, 0.0, 0.0))
                gui.control_set_skin(graph.base, gui.g_blackSkin)
                gui.control_set_dock(graph.base, gui.DOCK_FILL)
                gui.control_set_focus_index(graph.base, 0)
            }
        }
    }

    // pumpcx screen
    {
        g_pumpcxScreen = gui.screen_create("pumpcx")
        gui.control_set_skin(g_pumpcxScreen.base, gui.g_blackSkin)
        gui.control_set_bounds(g_pumpcxScreen.base, screenBounds)
        gui.screen_set_duration(g_pumpcxScreen, 2.0D)
        gui.screen_set_on_next(g_pumpcxScreen, g_mainScreen)
        gui.screen_set_on_event(g_pumpcxScreen, g_mainScreen)

        {
            var label label_id = gui.label_create("pumpcx")
            gui.control_add_child(g_pumpcxScreen.base, label.base)
            //gui.control_set_skin(label.base, gui.g_redSkin)
            gui.control_set_bounds(label.base, mat.v4_(0.0, 0.0, gfx.gfx_width / 2.0, gfx.gfx_height / 2.0))
            gui.control_set_autoscale(label.base, gui.AUTOSCALE)
            gui.control_set_align(label.base, gui.ALIGN_CENTER)
            gui.label_set_font(label, gui.g_boldFont)
            gui.label_set_text(label, "pumpcx")
            gui.label_set_size(label, gui.g_fontSizeTitle)
            gui.label_set_align(label, gui.ALIGN_CENTER)
        }
    }

    // skycoin screen
    {
        g_skycoinScreen = gui.screen_create("skycoin")
        gui.control_set_skin(g_skycoinScreen.base, gui.g_blackSkin)
        gui.control_set_bounds(g_skycoinScreen.base, screenBounds)
        gui.screen_set_duration(g_skycoinScreen, -2.0D)
        gui.screen_set_on_next(g_skycoinScreen, g_pumpcxScreen)
        gui.screen_set_on_event(g_skycoinScreen, g_mainScreen)

        {
            var picture picture_id = gui.picture_create("skycoin")
            gui.control_add_child(g_skycoinScreen.base, picture.base)
            //gui.control_set_skin(picture.base, g_blackSkin) // panic if no skin g_redSkin)
            gui.control_set_bounds(picture.base, mat.v4_(0.0, 0.0, gfx.gfx_width / 2.0, gfx.gfx_height / 2.0))
            gui.control_set_align(picture.base, gui.ALIGN_CENTER)
            gui.control_set_autoscale(picture.base, gui.AUTOSCALE)
            gui.picture_set_align(picture, gui.ALIGN_CENTER)
            gui.picture_set_texture(picture, gui.g_skycoinTexture)
        var fontTexture texture_s = gui.g_fonts[gui.g_awesomeBoldFont.font].textures[0] // ##0 auto select best size
    gui.picture_set_texture(picture, fontTexture)
        }
    }

    // debug screen
    {
        g_debugScreen = gui.screen_create("debug")
        gui.control_set_skin(g_debugScreen.base, gui.g_blackSkin)
        gui.control_set_bounds(g_debugScreen.base, screenBounds)
        gui.screen_set_duration(g_debugScreen, 2.0D)
        gui.screen_set_on_next(g_debugScreen, g_skycoinScreen)
        gui.screen_set_on_event(g_debugScreen, g_mainScreen)

        {
            var label label_id = gui.label_create("pumpcx_top_left")
            gui.control_add_child(g_debugScreen.base, label.base)
            gui.control_set_skin(label.base, gui.g_redSkin)
            gui.control_set_bounds(label.base, mat.v4_(0.0, gfx.gfx_height / 2.0, gfx.gfx_width / 2.0, gfx.gfx_height / 2.0))
            gui.control_set_autoscale(label.base, gui.AUTOSCALE)
            gui.label_set_font(label, gui.g_boldFont)
            gui.label_set_text(label, "pumpcx")
            gui.label_set_align(label, gui.ALIGN_CENTER)
            gui.label_set_color(label, gui.g_green)
            gui.label_set_size(label, gui.g_fontSizeTitle)
        }

        {
            var label label_id = gui.label_create("pumpcx_bottom_right")
            gui.control_add_child(g_debugScreen.base, label.base)
            gui.control_set_skin(label.base, gui.g_greenSkin)
            gui.control_set_bounds(label.base, mat.v4_(gfx.gfx_width / 2.0, 0.0, gfx.gfx_width / 2.0, gfx.gfx_height / 2.0))
            gui.control_set_autoscale(label.base, gui.AUTOSCALE)
            gui.label_set_font(label, gui.g_boldFont)
            gui.label_set_text(label, "pumpcx")
            gui.label_set_align(label, gui.ALIGN_CENTER)
            gui.label_set_color(label, gui.g_red)
            gui.label_set_size(label, gui.g_fontSizeTitle)
        }

        {
            var picture picture_id = gui.picture_create("skycoin_0")
            gui.control_add_child(g_debugScreen.base, picture.base)
            gui.control_set_bounds(picture.base, mat.v4_(0.0, 0.0, gfx.gfx_width / 2.0, gfx.gfx_height / 2.0))
            gui.control_set_autoscale(picture.base, gui.AUTOSCALE)
            gui.picture_set_texture(picture, gui.g_skycoinTexture)
            gui.picture_set_align(picture, gui.ALIGN_CENTER)
        }

        {
            var picture picture_id = gui.picture_create("skycoin_1")
            gui.control_add_child(g_debugScreen.base, picture.base)
            gui.control_set_bounds(picture.base, mat.v4_(gfx.gfx_width / 2.0, gfx.gfx_height / 2.0, gfx.gfx_width / 2.0, gfx.gfx_height / 2.0))
            gui.control_set_autoscale(picture.base, gui.AUTOSCALE)
            gui.picture_set_texture(picture, gui.g_skycoinTexture)
            gui.picture_set_align(picture, gui.ALIGN_CENTER)
        }

        {
            var control control_id = gui.control_create("alpha")
            gui.control_add_child(g_debugScreen.base, control)
            gui.control_set_skin(control, gui.g_blueAlphaSkin)
            gui.control_set_bounds(control, mat.v4_(gfx.gfx_width / 4.0, gfx.gfx_height / 4.0, gfx.gfx_width / 2.0, gfx.gfx_height / 2.0))
        }
    }

    // boot screen
    {
        g_bootScreen = gui.screen_create("boot")
        gui.control_set_skin(g_bootScreen.base, gui.g_blackSkin)
        gui.control_set_size(g_bootScreen.base, screenSize)
        gui.screen_set_duration(g_bootScreen, 2.0D)
        gui.screen_set_on_next(g_bootScreen, g_debugScreen)
        gui.screen_set_on_event(g_bootScreen, g_mainScreen)
    }

    //gui.show_screen(g_bootScreen)
    //gui.show_screen(g_skycoinScreen)
    gui.show_screen(g_mainScreen)

    var profileSwap profile_id = fps.create_profile("swap")
    var profileFrame profile_id = fps.create_profile("frame")
    var profileUpdate profile_id = fps.create_profile("update")
    var profileGuiUpdate profile_id = fps.create_profile("gui_update")
    var profileGuiResize profile_id = fps.create_profile("gui_resize")
    var profileRender profile_id = fps.create_profile("render")
    var profileGuiRender profile_id = fps.create_profile("gui_render")
    gui.g_profileRenderCurrentScreen = fps.create_profile("gui_render_current_screen")
    gui.g_profileRenderScreenControl = fps.create_profile("gui_render_screen_control")
    gui.g_profileRenderOpaqueVertexColoredTriangles = fps.create_profile("gui_render_opaque_vertex_colored_triangles")
    gui.g_profileRenderOpaqueTexturedTriangles = fps.create_profile("gui_render_opaque_textured_triangles")
    gui.g_profileRenderOpaqueVertexColoredLines = fps.create_profile("gui_render_opaque_vertex_colored_lines")
    gui.g_profileRenderAlphaVertexColoredTriangles = fps.create_profile("gui_render_alpha_vertex_colored_triangles")
    gui.g_profileRenderAlphaTexturedTriangles = fps.create_profile("gui_render_alpha_textured_triangles")
    gui.g_profileRenderNextScreen = fps.create_profile("gui_render_next_screen")
    gui.g_profileRenderScreenEffect = fps.create_profile("gui_render_screen_effect")
    gui.g_profileRenderModals = fps.create_profile("gui_render_modals")
    gui.g_profileRenderDefaultFramebuffer = fps.create_profile("gui_render_default_framebuffer")
    gui.g_profileControlRender = fps.create_profile("gui_control_render")
    gui.g_profileControlRenderChild = fps.create_profile("gui_control_render_child")
    gui.g_profileRenderControlFull = fps.create_profile("gui_render_control_full")
    // main loop
    var fps fps.fps_s = fps.init(targetFps)
    for app.running(application) {

        // swap
        fps = fps.begin_update(fps)
        fps.begin_profile(profileSwap)
        {
            // frame
            fps.begin_profile(profileFrame)
            app.begin_update(application)

            {
                // update
                fps.begin_profile(profileUpdate)
                    fps.begin_profile(profileGuiUpdate)
                        gui.update(fps.delta_time(&fps))
                    fps.end_profile(profileGuiUpdate)
                    fps.begin_profile(profileGuiResize)
                        gui.resize()
                    fps.end_profile(profileGuiResize)
                fps.end_profile(profileUpdate)
            }
            {
                // render
                fps.begin_profile(profileRender)
                    fps.begin_profile(profileGuiRender)
                        gui.render()
                    fps.end_profile(profileGuiRender)
                fps.end_profile(profileRender)
            }

            app.end_update(application)
            fps.end_profile(profileFrame)
        }
        fps.end_profile(profileSwap)
        fps = fps.end_update(fps)
    }

    gfx.free()

    printf("dumpcx\n")
}
