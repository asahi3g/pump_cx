//-----------------------------------------------------------------------------
// pump-cx
//-----------------------------------------------------------------------------
package main
import "app"
import "fps"
import "gfx"
import "gl"
import "gltext"
import "gui"
import "mat"
import "uti"

//-----------------------------------------------------------------------------
// CX_BUGS
//-----------------------------------------------------------------------------
// implicit cast ui32 -> i32
// printf %d ui32
// pointers
// assert doesn't stop program execution
// multiline array init
// inline array init
// inline string init
// if b {} else {} unexpected ELSE
// for true { return false }
// if glerror == 0 { break } unexpected RBRACE


//-----------------------------------------------------------------------------
// PUMPCX BUGS
//-----------------------------------------------------------------------------
// fix crash when deleting programs
// fix lag at startup (shader creation ?)

//-----------------------------------------------------------------------------
// TODO
//-----------------------------------------------------------------------------
// release fonts
// terminate glfw
// random func : i32.rand(0,2)
// skycoin fonts
// rewrite screen creationg
// effects
// center window at creation
// cli params (width, height, fullscreen, vsync)

//-----------------------------------------------------------------------------
// DONE
//-----------------------------------------------------------------------------
// split main.cx -> app.cx, fps.cx, gfx.cx, gui.cx
// skycoin colors
// gfx : state cache
// remove gl from main

//-----------------------------------------------------------------------------
// main
//-----------------------------------------------------------------------------

var g_skycoinTexture gfx.texture_s
var g_skycoinFontTexture gfx.texture_s

// rewrite screen init
var g_bootScreen     gui.screen_handle_s = gui.invalid_screen()
var g_debugScreen    gui.screen_handle_s = gui.invalid_screen()
var g_skycoinScreen  gui.screen_handle_s = gui.invalid_screen()
var g_pumpcxScreen   gui.screen_handle_s = gui.invalid_screen()
var g_mainScreen     gui.screen_handle_s = gui.invalid_screen()
var g_gameScreen     gui.screen_handle_s = gui.invalid_screen()
var g_exitAppScreen  gui.screen_handle_s = gui.invalid_screen()
var g_exitGameScreen gui.screen_handle_s = gui.invalid_screen()
var g_pauseScreen    gui.screen_handle_s = gui.invalid_screen()

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func main() {

    var targetFps f64 = 60.0D

    var window str // inline str init doesn't work
    window = "window"

    // init
    app.init(window, "pumpcx", 800, 600, targetFps, 2, 1, "main.keyPressed")
    gfx.init(app.g_width, app.g_height)
    gui.init(app.g_width, app.g_height, gfx.gfx_ratio)

    var screenBounds mat.v4 = mat.v4_(-1.0, -1.0, 2.0, 2.0)

    // boot screen
    {
        g_bootScreen = gui.create_screen(2.0D, gui.g_blackControlSkin, screenBounds)
    }

    // debug screen
    {
        g_debugScreen = gui.create_screen(2.0D, gui.g_blackControlSkin, screenBounds)
        printf("g_debugScreen %d, %d\n", g_debugScreen.screen, g_debugScreen.control)

        gui.control_add_control(g_debugScreen.control, gui.create_control(gui.GUI_CONTROL, gui.g_controlCount,
            gui.g_redControlSkin, mat.v4_(-1.0, 0.0, 1.0, 1.0), 0, 0, 0, 0))

        gui.control_add_control(g_debugScreen.control, gui.create_control(gui.GUI_CONTROL, gui.g_controlCount,
            gui.g_greenControlSkin, mat.v4_(0.0, -1.0, 1.0, 1.0), 0, 0, 0, 0))

        gui.control_add_picture(g_debugScreen.control, gui.create_picture(
            gui.g_skycoinTexture, -1, mat.v4_(0.0, 0.0, 1.0, 1.0), 0, 0, 0, 0))

        gui.control_add_picture(g_debugScreen.control, gui.create_picture(
            gui.g_skycoinTexture, -1, mat.v4_(-1.0, -1.0, 1.0, 1.0), 0, 0, 0, 0))

        gui.control_add_control(g_debugScreen.control, gui.create_control(GUI_CONTROL, gui.g_controlCount,
            gui.g_primaryBlueAlphaControlSkin, mat.v4_(-0.5, -0.5, 1.0, 1.0), 0, 0, 0, 0))
    }

    // skycoin screen
    {
        g_skycoinScreen = gui.create_screen(2.0D, gui.g_blackControlSkin, screenBounds)

        gui.control_add_picture(g_skycoinScreen.control, gui.create_picture(
            gui.g_skycoinTexture, -1, mat.v4_(0.0, 0.0, 1.16, 1.16), 0, gui.AUTORATIO_X, gui.ALIGN_CENTER, 0))

        //gui.control_add_control(g_skycoinScreen.control, gui.create_picture(
        ///    gui.g_skycoinTexture, -1, mat.v4_(0.0, 0.0, 1.16, 1.16), 0, gui.ALIGN_CENTER, 0).control) // ##issue_59 issue
    }

    // pumpcx screen
    {
        g_pumpcxScreen = gui.create_screen(2.0D, gui.g_blackControlSkin, screenBounds)

        gui.control_add_label(g_pumpcxScreen.control, gui.create_label(
            "skycoin", "pumpcx", -1, gfx.zero, gui.AUTOSIZE, 0, gui.ALIGN_CENTER, 0))
    }

    // main screen
    {
        g_mainScreen = gui.create_screen(2.0D, gui.g_primaryBlueControlSkin, screenBounds)

        gui.control_add_control(g_mainScreen.control, gui.create_control(gui.GUI_CONTROL, gui.g_controlCount,
            gui.g_redControlSkin, mat.v4_(0.0, 0.0, 0.5, 0.0), 0, 0, 0, gui.DOCK_LEFT))

        gui.control_add_control(g_mainScreen.control, gui.create_control(gui.GUI_CONTROL, gui.g_controlCount,
            gui.g_greenControlSkin, gfx.zero, 0, 0, 0, gui.DOCK_FILL)) //##pending issue g_greenControlSkin is not in SKY package
    }

    // game screen
    {
        g_gameScreen = gui.create_screen(-2.0D, gui.g_blackControlSkin, screenBounds)

        gui.control_add_partition(g_gameScreen.control, gui.create_partition(
            gui.g_redControlSkin, mat.v4_(0.0, 0.0, 0.0, 0.2), 0, 0, 0, gui.DOCK_TOP))


        gui.control_add_keyboard(g_gameScreen.control, gui.create_keyboard(
            g_greenControlSkin, mat.v4_(0.0, 0.0, 0.8, 0.3), 0/*gui.AUTOSIZE_Y*/, 0, gui.ALIGN_HORZ_BOTTOM, 0))
    }

    // exit app screen
    {
        g_exitAppScreen = gui.create_screen(-1.0D, gui.g_modalControlSkin, screenBounds)

        gui.control_add_window(g_exitAppScreen.control, gui.create_window(
            gui.g_windowControlSkin, gfx.zero, gui.AUTOSIZE, 0, gui.ALIGN_CENTER, 0))
    }

    // exit game screen
    {
        g_exitGameScreen = gui.create_screen(-1.0D, gui.g_modalControlSkin, screenBounds)

        gui.control_add_window(g_exitGameScreen.control, gui.create_window(
            gui.g_windowControlSkin, gfx.zero, gui.AUTOSIZE, 0, gui.ALIGN_CENTER, 0))
    }

    // pause screen
    {
        g_pauseScreen = gui.create_screen(-1.0D, gui.g_modalControlSkin, screenBounds)

        gui.control_add_window(g_pauseScreen.control, gui.create_window(
            gui.g_windowControlSkin, gfx.zero, gui.AUTOSIZE, 0, gui.ALIGN_CENTER, 0))
    }

    gui.screen_set_order(g_bootScreen   , gui.invalid_screen(), g_debugScreen)
    gui.screen_set_order(g_debugScreen  , g_bootScreen        , g_skycoinScreen)
    gui.screen_set_order(g_skycoinScreen, g_debugScreen       , g_pumpcxScreen)
    gui.screen_set_order(g_pumpcxScreen , g_skycoinScreen     , g_mainScreen)
    gui.screen_set_order(g_mainScreen   , g_pumpcxScreen      , g_gameScreen)
    gui.screen_set_order(g_gameScreen   , g_mainScreen        , gui.invalid_screen())

    g_nextScreen = g_bootScreen
    //g_nextScreen = g_mainScreen
    //g_nextScreen = g_gameScreen

    gui.screen_set_on_exit(g_mainScreen, g_exitAppScreen)
    gui.screen_set_on_exit(g_gameScreen, g_exitGameScreen)

    gui.screen_set_on_menu(g_mainScreen, g_pauseScreen)
    gui.screen_set_on_menu(g_gameScreen, g_pauseScreen)

    // main loop
    var fps fps.fps_s = fps.init(targetFps)
    for app.running(window) {
        fps = fps.begin_update(fps)
        app.begin_update(window)
        gui.update(fps.delta_time(&fps))
        gui.resize()
        gui.render()
        app.end_update(window)
        fps = fps.end_update(fps)
    }

    gfx.free()

    printf("dumpcx\n")
}
