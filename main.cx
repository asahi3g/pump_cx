//-----------------------------------------------------------------------------
// pump-cx
//-----------------------------------------------------------------------------
package main
import "app"
import "fps"
import "gfx"
import "gl"
import "gltext"
import "gui"
import "mat"
import "uti"

//-----------------------------------------------------------------------------
// CX_BUGS
//-----------------------------------------------------------------------------
// implicit cast ui32 -> i32
// printf %d ui32
// pointers
// assert doesn't stop program execution
// multiline array init
// inline array init
// inline string init
// if b {} else {} unexpected ELSE
// for true { return false }
// if glerror == 0 { break } unexpected RBRACE
///    gui.g_skycoinTexture, -1, mat.v4_(0.0, 0.0, 1.16, 1.16), 0, gui.ALIGN_CENTER, 0).control) // ##issue_59 issue


//-----------------------------------------------------------------------------
// PUMPCX BUGS
//-----------------------------------------------------------------------------
// fix crash when deleting programs
// fix lag at startup (shader creation ?)
// flickering screen when on_exit during the boot sequence

//-----------------------------------------------------------------------------
// TODO
//-----------------------------------------------------------------------------
// release fonts
// terminate glfw
// random func : i32.rand(0,2)
// skycoin fonts
// rewrite screen creationg
// effects
// center window at creation
// cli params (width, height, fullscreen, vsync)

//-----------------------------------------------------------------------------
// DONE
//-----------------------------------------------------------------------------
// split main.cx -> app.cx, fps.cx, gfx.cx, gui.cx
// skycoin colors
// gfx : state cache
// remove gl from main

//-----------------------------------------------------------------------------
// main
//-----------------------------------------------------------------------------
// rewrite screen init
var g_bootScreen     gui.screen_id = gui.invalid_screen()
var g_debugScreen    gui.screen_id = gui.invalid_screen()
var g_skycoinScreen  gui.screen_id = gui.invalid_screen()
var g_pumpcxScreen   gui.screen_id = gui.invalid_screen()
var g_mainScreen     gui.screen_id = gui.invalid_screen()
var g_gameScreen     gui.screen_id = gui.invalid_screen()
var g_exitAppScreen  gui.screen_id = gui.invalid_screen()
var g_exitGameScreen gui.screen_id = gui.invalid_screen()
var g_pauseScreen    gui.screen_id = gui.invalid_screen()

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func on_exit_app_window_no_state(controlIndex i32, action i32) {
    var id gui.control_id = gui.control_id_(controlIndex)

    // close dialog
    if (action == gui.KEY_PRESS) {
        printf("NO PRESSED\n")
    } else if (action == gui.KEY_RELEASE) {
        printf("NO RELEASED\n")
        gui.hide_modal(g_exitAppScreen)
    } else if (action == gui.KEY_REPEAT) {
        printf("NO REPEAT\n")
    } else {
        uti.assert_(false, "on_exit_app_window_no_state : invalid action")
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func on_exit_app_window_yes_state(controlIndex i32, action i32) {
    var id gui.control_id = gui.control_id_(controlIndex)

    // terminate
    if (action == gui.KEY_PRESS) {
        printf("YES PRESSED\n")
    } else if (action == gui.KEY_RELEASE) {
        printf("YES RELEASED\n")
        gui.hide_modal(g_exitAppScreen)
        app.exit()
    } else if (action == gui.KEY_REPEAT) {
        printf("YES REPEAT\n")
    } else {
        uti.assert_(false, "on_exit_app_window_yes_state : invalid action")
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func main() {

    var targetFps f64 = 60.0D

    var application str // ##pending inline string init
    application = "window"
    app.init(application, "pumpcx", 800, 600, targetFps, 2, 1, "main.keyPressed")
    gfx.init(app.app_width, app.app_height)
    gui.init()

    var screenBounds mat.v4 = mat.v4_(0.0, 0.0, 2.0, 2.0)
    var screenSize mat.v2 = mat.v2_(2.0, 2.0)

    // exit app screen
    {
        g_exitAppScreen = gui.create_screen("exit_app")
       gui.control_set_skin(g_exitAppScreen.base, gui.g_modalControlSkin)
       printf("TATA\n")
        gui.control_set_bounds(g_exitAppScreen.base, screenBounds)
        gui.screen_set_duration(g_exitAppScreen, -2.0D)
        gui.screen_set_modal(g_exitAppScreen, true)

        {
            var window gui.window_id = gui.create_window("exit_app_window") // ##pending window vs window at main scope
            gui.control_add_child(g_exitAppScreen.base, window.base)
            gui.control_set_skin(window.base, gui.g_windowControlSkin)
            //gui.control_set_padding(window.base, mat.v4_(0.1, 0.1, 0.1, 0.1))
            gui.control_set_autosize(window.base, gui.AUTOSIZE)
            gui.control_set_align(window.base, gui.ALIGN_CENTER)
            gui.window_set_caption(window, "pumpcx")
            gui.window_add_button(window, "no", "No", "main", "on_exit_app_window_no_state")
            gui.window_add_button(window, "yes", "Yes", "main", "on_exit_app_window_yes_state")

            {
                var text gui.label_id = gui.create_label("exit_app_label")
                gui.window_set_containee(window, text.base)
                //gui.control_set_skin(text.base, gui.g_primaryBlueControlSkin)
                gui.control_set_dock(text.base, gui.DOCK_FILL)
                gui.control_set_autosize(text.base, gui.AUTOSIZE)
                gui.label_set_font(text, gui.g_regularFont)
                gui.label_set_text(text, "Do you really want to dumpcx ?")
                gui.label_set_size(text, gui.g_fontSizeText)
                gui.label_set_color(text, gui.g_white)
                gui.label_set_align(text, gui.ALIGN_CENTER)
            }
        }
    }

    // exit game screen
    {
        g_exitGameScreen = gui.create_screen("exit_game")
        gui.control_set_skin(g_exitGameScreen.base, gui.g_modalControlSkin)
        gui.control_set_bounds(g_exitGameScreen.base, screenBounds)
        gui.screen_set_duration(g_exitGameScreen, -2.0D)
        gui.screen_set_modal(g_exitGameScreen, true)

        {
            var window gui.window_id = gui.create_window("exit_game_window")
            gui.control_add_child(g_exitGameScreen.base, window.base)
            gui.control_set_skin(g_exitGameScreen.base, gui.g_windowControlSkin)
            gui.control_set_bounds(window.base, mat.v4_(-0.5, -0.5, 1.0, 1.0))
            //gui.control_set_autosize(window.base, gui.AUTOSIZE)
            gui.control_set_align(window.base, gui.ALIGN_CENTER)
            gui.window_set_caption(window, "pumpcx")
        }
    }

    // pause screen
    {
        g_pauseScreen = gui.create_screen("pause")
        gui.control_set_skin(g_pauseScreen.base, gui.g_modalControlSkin)
        gui.control_set_bounds(g_pauseScreen.base, screenBounds)
        gui.screen_set_duration(g_pauseScreen, -2.0D)
        gui.screen_set_modal(g_pauseScreen, true)

        {
            var window gui.window_id = gui.create_window("pause")
            gui.control_add_child(g_pauseScreen.base, window.base)
            gui.control_set_skin(g_pauseScreen.base, gui.g_windowControlSkin)
            gui.control_set_bounds(window.base, mat.v4_(-0.5, -0.5, 1.0, 1.0))
            gui.control_set_autosize(window.base, gui.AUTOSIZE)
            gui.control_set_align(window.base, gui.ALIGN_CENTER)
            gui.window_set_caption(window, "pumpcx")
        }
    }


    // game screen
    {
        g_gameScreen = gui.create_screen("game")
        gui.control_set_skin(g_gameScreen.base, gui.g_blackControlSkin)
        gui.control_set_bounds(g_gameScreen.base, screenBounds)
        gui.control_set_padding(g_gameScreen.base, mat.v4_(0.08, 0.08, 0.08, 0.08))
        gui.screen_set_duration(g_gameScreen, -2.0D)
        gui.screen_set_on_enter(g_gameScreen, g_pauseScreen)
        gui.screen_set_on_exit(g_gameScreen, g_exitGameScreen)
        gui.screen_set_on_menu(g_gameScreen, g_pauseScreen)

        {
            var partition partition_id = gui.create_partition("partition")
            gui.control_add_child(g_gameScreen.base, partition.base)
            gui.control_set_skin(partition.base, gui.g_blackControlSkin)
            gui.control_set_size(partition.base, mat.v2_(0.0, 0.2))
            gui.control_set_dock(partition.base, gui.DOCK_TOP)
        }

        {
            var keyboard keyboard_id = gui.create_keyboard("keyboard")
            gui.control_add_child(g_gameScreen.base, keyboard.base)
            gui.control_set_skin(keyboard.base, gui.g_blackControlSkin)
            gui.control_set_size(keyboard.base, mat.v2_(0.0, 0.3))
            gui.control_set_align(keyboard.base, gui.ALIGN_HORZ_BOTTOM)
        }
    }

    // main screen
    {
        g_mainScreen = gui.create_screen("main")
        gui.control_set_skin(g_mainScreen.base, gui.g_blackControlSkin)
        gui.control_set_bounds(g_mainScreen.base, screenBounds)
        gui.control_set_padding(g_mainScreen.base, mat.v4_(0.01, 0.01, 0.01, 0.01))
        gui.screen_set_duration(g_mainScreen, -2.0D)
        gui.screen_set_on_next(g_mainScreen, g_gameScreen)
        gui.screen_set_on_enter(g_mainScreen, g_gameScreen)
        gui.screen_set_on_exit(g_mainScreen, g_exitAppScreen)
        gui.screen_set_on_menu(g_mainScreen, g_pauseScreen)

        {
            var control control_id = gui.create_control("toolbar")
            gui.control_add_child(g_mainScreen.base, control)
            gui.control_set_padding(control, mat.v4_(0.01, 0.01, 0.01, 0.01))
            gui.control_set_size(control, mat.v2_(0.0, 0.1))
            gui.control_set_skin(control, gui.g_blackControlSkin)
            gui.control_set_dock(control, gui.DOCK_TOP)
        }

        {
            var panel control_id = gui.create_control("panel")
            gui.control_add_child(g_mainScreen.base, panel)
            gui.control_set_padding(panel, mat.v4_(0.0, 0.0, 0.01, 0.0))
            gui.control_set_size(panel, mat.v2_(0.0, 0.1))
            gui.control_set_dock(panel, gui.DOCK_FILL)

            {
                var right splitter_id = gui.splitter_create("right")
                gui.control_add_child(panel, right.base)
                gui.control_set_size(right.base, mat.v2_(0.6, 0.0))
                gui.control_set_dock(right.base, gui.DOCK_RIGHT)
                gui.control_set_spacing(right.base, mat.v2_(0.0, 0.01))
                gui.splitter_set_direction(right, gui.SPLIT_BOTTOM)

                var rightBottom splitter_id = gui.splitter_create("rightBottom")
                var rightTop splitter_id = gui.splitter_create("rightTop")
                gui.splitter_set_controls(right, rightBottom.base, rightTop.base)

                {
                   //gui.control_add_child(right, rightBottom.base)
                    gui.control_set_size(rightBottom.base, mat.v2_(0.0, 0.5))
                    gui.control_set_dock(rightBottom.base, gui.DOCK_BOTTOM)
                    gui.control_set_spacing(rightBottom.base, mat.v2_(0.0, 0.01))
                    //gui.control_set_padding(rightBottom.base, mat.v4_(0.0, 0.01, 0.0, 0.0))
                    gui.splitter_set_direction(rightBottom, gui.SPLIT_BOTTOM)

                    {
                        var rightBottomPlayControl control_id = gui.create_control("rightBottomPlayCtrl")
                        //gui.control_add_child(rightBottom, rightBottomPlayControl)
                        gui.control_set_dock(rightBottomPlayControl, gui.DOCK_BOTTOM)
                        gui.control_set_skin(rightBottomPlayControl, gui.g_debugBlueControlSkin)
                        gui.control_set_size(rightBottomPlayControl, mat.v2_(0.0, 0.2))

                        var rightBottomSplitter splitter_id = gui.splitter_create("rightBottomSplitter")
                        //gui.control_add_child(rightBottom, rightBottomSplitter.base)
                        gui.control_set_dock(rightBottomSplitter.base, gui.DOCK_TOP)
                        gui.control_set_spacing(rightBottomSplitter.base, mat.v2_(0.01, 0.0))
                        gui.splitter_set_direction(rightBottomSplitter, gui.SPLIT_HORZ)

                        var bottomLeft control_id = gui.create_control("bottomLeft")
                        gui.control_set_dock(bottomLeft, gui.DOCK_LEFT)
                        gui.control_set_skin(bottomLeft, gui.g_debugGreenControlSkin)

                        var bottomRight control_id = gui.create_control("bottomRight")
                        gui.control_set_dock(bottomRight, gui.DOCK_RIGHT)
                        gui.control_set_skin(bottomRight, gui.g_debugRedControlSkin)

                        gui.splitter_set_controls(rightBottomSplitter, bottomLeft, bottomRight)
                    }

                    gui.splitter_set_controls(rightBottom, rightBottomPlayControl, rightBottomSplitter.base)
                }

                {
                    //gui.control_add_child(right, rightTop.base)
                    gui.control_set_dock(rightTop.base, gui.DOCK_TOP)
                    gui.control_set_spacing(rightTop.base, mat.v2_(0.01, 0.01))
                    gui.control_set_padding(rightTop.base, mat.v4_(0.0, 0.0, 0.0, 0.0))
                    gui.splitter_set_direction(rightTop, gui.SPLIT_HORZ)

                    {
                        var order splitter_id = gui.splitter_create("order")
                        gui.control_set_spacing(order.base, mat.v2_(0.01, 0.01))
                        gui.control_set_padding(order.base, mat.v4_(0.0, 0.0, 0.0, 0.0))
                        gui.control_set_dock(order.base, gui.DOCK_LEFT)
                        gui.splitter_set_direction(order, gui.SPLIT_VERT)

                        {
                            var buy control_id = gui.create_control("buy")
                            gui.control_set_skin(buy, gui.g_debugGreenControlSkin)
                            gui.control_set_dock(buy, gui.DOCK_BOTTOM)

                            var sell control_id = gui.create_control("sell")
                            gui.control_set_skin(sell, gui.g_debugRedControlSkin)
                            gui.control_set_dock(sell, gui.DOCK_TOP)

                            gui.splitter_set_controls(order, buy, sell)
                        }

                        var done control_id = gui.create_control("done")
                        gui.control_set_padding(done, mat.v4_(0.0, 0.0, 0.0, 0.0))
                        gui.control_set_dock(done, gui.DOCK_RIGHT)
                        gui.control_set_skin(done, gui.g_debugBlueControlSkin)

                        gui.splitter_set_controls(rightTop, order.base, done)
                    }
                }
            }

            {
                var graph graph_id = gui.graph_create("graph")
                gui.control_add_child(panel, graph.base)
                gui.control_set_padding(graph.base, mat.v4_(0.0, 0.01, 0.0, 0.0))
                gui.control_set_skin(graph.base, gui.g_blackControlSkin)
                gui.control_set_dock(graph.base, gui.DOCK_FILL)
            }
        }
    }

    // pumpcx screen
    {
        g_pumpcxScreen = gui.create_screen("pumpcx")
        gui.control_set_skin(g_pumpcxScreen.base, gui.g_blackControlSkin)
        gui.control_set_bounds(g_pumpcxScreen.base, screenBounds)
        gui.screen_set_duration(g_pumpcxScreen, 2.0D)
        gui.screen_set_on_next(g_pumpcxScreen, g_mainScreen)
        gui.screen_set_on_event(g_pumpcxScreen, g_mainScreen)

        {
            var label label_id = gui.create_label("pumpcx")
            gui.control_add_child(g_pumpcxScreen.base, label.base)
            //gui.control_set_skin(label.base, gui.g_redControlSkin)
            gui.control_set_bounds(label.base, mat.v4_(0.0, 0.0, 1.16, 1.16))
            gui.control_set_autoscale(label.base, gui.AUTOSCALE)
            gui.control_set_align(label.base, gui.ALIGN_CENTER)
            gui.label_set_font(label, gui.g_boldFont)
            gui.label_set_text(label, "pumpcx")
            gui.label_set_size(label, gui.g_fontSizeTitle)
            gui.label_set_align(label, gui.ALIGN_CENTER)
        }
    }

    // skycoin screen
    {
        g_skycoinScreen = gui.create_screen("skycoin")
        gui.control_set_skin(g_skycoinScreen.base, gui.g_blackControlSkin)
        gui.control_set_bounds(g_skycoinScreen.base, screenBounds)
        gui.screen_set_duration(g_skycoinScreen, 2.0D)
        gui.screen_set_on_next(g_skycoinScreen, g_pumpcxScreen)
        gui.screen_set_on_event(g_skycoinScreen, g_mainScreen)

        {
            var picture picture_id = gui.create_picture("skycoin")
            gui.control_add_child(g_skycoinScreen.base, picture.base)
            //gui.control_set_skin(picture.base, g_blackControlSkin) // panic if no skin g_redControlSkin)
            gui.control_set_bounds(picture.base, mat.v4_(0.0, 0.0, 1.16, 1.16))
            gui.control_set_align(picture.base, gui.ALIGN_CENTER)
            gui.control_set_autoscale(picture.base, gui.AUTOSCALE)
            gui.picture_set_align(picture, gui.ALIGN_CENTER)
            gui.picture_set_texture(picture, gui.g_skycoinTexture)
        }
    }

    // debug screen
    {
        g_debugScreen = gui.create_screen("debug")
        gui.control_set_skin(g_debugScreen.base, gui.g_blackControlSkin)
        gui.control_set_bounds(g_debugScreen.base, screenBounds)
        gui.screen_set_duration(g_debugScreen, 2.0D)
        gui.screen_set_on_next(g_debugScreen, g_skycoinScreen)
        gui.screen_set_on_event(g_debugScreen, g_mainScreen)

        {
            var label label_id = gui.create_label("pumpcx_top_left")
            gui.control_add_child(g_debugScreen.base, label.base)
            gui.control_set_skin(label.base, gui.g_redControlSkin)
            gui.control_set_bounds(label.base, mat.v4_(0.0, 1.0, 1.0, 1.0))
            gui.control_set_autoscale(label.base, gui.AUTOSCALE)
            gui.label_set_font(label, gui.g_boldFont)
            gui.label_set_text(label, "pumpcx")
            gui.label_set_align(label, gui.ALIGN_CENTER)
            gui.label_set_color(label, gui.g_green)
            gui.label_set_size(label, gui.g_fontSizeTitle)
        }

        {
            var label label_id = gui.create_label("pumpcx_bottom_right")
            gui.control_add_child(g_debugScreen.base, label.base)
            gui.control_set_skin(label.base, gui.g_greenControlSkin)
            gui.control_set_bounds(label.base, mat.v4_(1.0, 0.0, 1.0, 1.0))
            gui.control_set_autoscale(label.base, gui.AUTOSCALE)
            gui.label_set_font(label, gui.g_boldFont)
            gui.label_set_text(label, "pumpcx")
            gui.label_set_align(label, gui.ALIGN_CENTER)
            gui.label_set_color(label, gui.g_red)
            gui.label_set_size(label, gui.g_fontSizeTitle)
        }

        {
            var picture picture_id = gui.create_picture("skycoin_0")
            gui.control_add_child(g_debugScreen.base, picture.base)
            gui.control_set_bounds(picture.base, mat.v4_(0.0, 0.0, 1.0, 1.0))
            gui.control_set_autoscale(picture.base, gui.AUTOSCALE)
            gui.picture_set_texture(picture, gui.g_skycoinTexture)
            gui.picture_set_align(picture, gui.ALIGN_CENTER)
        }

        {
            var picture picture_id = gui.create_picture("skycoin_1")
            gui.control_add_child(g_debugScreen.base, picture.base)
            gui.control_set_bounds(picture.base, mat.v4_(1.0, 1.0, 1.0, 1.0))
            gui.control_set_autoscale(picture.base, gui.AUTOSCALE)
            gui.picture_set_texture(picture, gui.g_skycoinTexture)
            gui.picture_set_align(picture, gui.ALIGN_CENTER)
        }

        {
            var control control_id = gui.create_control("alpha")
            gui.control_add_child(g_debugScreen.base, control)
            gui.control_set_skin(control, gui.g_primaryBlueAlphaControlSkin)
            gui.control_set_bounds(control, mat.v4_(0.5, 0.5, 1.0, 1.0))
        }
    }

    // boot screen
    {
        g_bootScreen = gui.create_screen("boot")
        gui.control_set_skin(g_bootScreen.base, gui.g_blackControlSkin)
        gui.control_set_size(g_bootScreen.base, screenSize)
        gui.screen_set_duration(g_bootScreen, 2.0D)
        gui.screen_set_on_next(g_bootScreen, g_debugScreen)
        gui.screen_set_on_event(g_bootScreen, g_mainScreen)
    }

    //gui.g_nextScreen = g_bootScreen
    //gui.g_nextScreen = g_debugScreen
    //gui.g_nextScreen = g_skycoinScreen
    //gui.g_nextScreen = g_pumpcxScreen
    //gui.g_nextScreen = g_mainScreen
    //gui.g_nextScreen = g_gameScreen

    gui.show_screen(g_mainScreen)

    // main loop
    var fps fps.fps_s = fps.init(targetFps)
    for app.running(application) {
        //printf("DEBUG : EVENT_UNUSED %d\n", gui.EVENT_UNUSED)
        fps = fps.begin_update(fps)
        app.begin_update(application)
        gui.update(fps.delta_time(&fps))
        gui.resize()
        gui.render()
        app.end_update(application)
        fps = fps.end_update(fps)
    }

    gfx.free()

    printf("dumpcx\n")
}
