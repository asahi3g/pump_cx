//-----------------------------------------------------------------------------
// pump-cx
//-----------------------------------------------------------------------------
package main
import "app"
import "fps"
import "gfx"
import "gl"
import "gui"
import "mat"
import "sky"
import "uti"

//-----------------------------------------------------------------------------
// CX_BUGS
//-----------------------------------------------------------------------------
// implicit cast ui32 -> i32
// printf %d ui32
// pointers
// assert doesn't stop program execution
// multiline array init
// inline array init
// inline string init
// if b {} else {} unexpected ELSE
// for true { return false }
// if glerror == 0 { break } unexpected RBRACE


//-----------------------------------------------------------------------------
// PUMPCX BUGS
//-----------------------------------------------------------------------------
// fix crash when deleting programs
// fix lag at startup (shader creation ?)

//-----------------------------------------------------------------------------
// TODO
//-----------------------------------------------------------------------------
// random func : i32.rand(0,2)
// skycoin fonts
// rewrite menu creationg
// effects
// center window at creation
// cli params (width, height, fullscreen, vsync)

//-----------------------------------------------------------------------------
// DONE
//-----------------------------------------------------------------------------
// split main.cx -> app.cx, fps.cx, gfx.cx, gui.cx
// skycoin colors
// gfx : state cache
// remove gl from main

//-----------------------------------------------------------------------------
// main
//-----------------------------------------------------------------------------
var g_opaqueVertexColoredTriangles gfx.mesh_s
var g_opaqueVertexColoredLines gfx.mesh_s

var g_opaqueTexturedTriangles gfx.mesh_s

var g_alphaVertexColoredTriangles gfx.mesh_s

var g_fullscreenQuad gfx.mesh_s

var g_target_0 gfx.target_s
var g_target_1 gfx.target_s

var g_programVertexColor i32

var g_programTexture i32
var g_albedoSampler i32 // per program, i need a effect struct

var g_programTrans_0 i32
var g_srcSampler i32
var g_dstSampler i32
var g_timeUniform i32

var g_skycoinTexture i32

var g_bootMenu i32
var g_skycoinMenu i32
var g_pumpcxMenu i32
var g_mainMenu i32

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func keyPressed(window str, key i32, scancode i32, action i32, mods i32) () {
    printf("key pressed : %d, scancode %d, action %d, mods %d\n", key, scancode, action, mods)
    //if key == 32 && action == 1 || key == 265 && action == 1 {
    //}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func render_boot_menu() () {
    gfx.begin_mesh(&g_opaqueVertexColoredTriangles)
    gfx.append_quad(&g_opaqueVertexColoredTriangles,  mat.v4_(-1.0, -1.0, 2.0, 2.0), sky.black)
    gfx.end_mesh(&g_opaqueVertexColoredTriangles)

    // opaque
	gfx.disable_blending()
    gfx.use_program(g_programVertexColor)
    if g_opaqueVertexColoredTriangles.index > 0 {
        gfx.render_mesh(&g_opaqueVertexColoredTriangles)
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func render_skycoin_menu() () {
    var tw f32 = 2526.0
    var th f32 = 1600.0
    var tr f32 = tw / th

    var targetW f32 = 1.16
    var targetH f32 = 1.16

    var w f32 = targetW * tr / f64.f32(app.g_ratio)
    var h f32 = targetH
    var x f32 = -1.0 + (2.0 - w) / 2.0
    var y f32 = -1.0 + (2.0 - h) / 2.0

    gfx.begin_mesh(&g_opaqueTexturedTriangles)
    gfx.append_quad(&g_opaqueTexturedTriangles, mat.v4_(x, y, w, h), gfx.white)
    gfx.end_mesh(&g_opaqueTexturedTriangles)

	gfx.disable_blending()
    gfx.use_program(g_programTexture)
    if g_opaqueTexturedTriangles.index > 0 {
        gfx.assign_texture(0, g_albedoSampler, g_skycoinTexture)
        gfx.render_mesh(&g_opaqueTexturedTriangles)
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func render_pumpcx_menu() () {
    render_debug()
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func render_main_menu() () {
    gfx.begin_mesh(&g_opaqueVertexColoredTriangles)
    gfx.append_quad(&g_opaqueVertexColoredTriangles,  mat.v4_(-1.0, -1.0, 2.0, 2.0), sky.blue)
	gfx.end_mesh(&g_opaqueVertexColoredTriangles)

    // opaque
	gfx.disable_blending()
    gfx.use_program(g_programVertexColor)
    if g_opaqueVertexColoredTriangles.index > 0 {
        gfx.render_mesh(&g_opaqueVertexColoredTriangles)
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func render_debug() () {
    // opaque
    gfx.begin_mesh(&g_opaqueTexturedTriangles)
    gfx.append_quad(&g_opaqueTexturedTriangles, mat.v4_(-1.0, -1.0, 1.0, 1.0), gfx.white)
    gfx.append_quad(&g_opaqueTexturedTriangles, mat.v4_( 0.0,  0.0, 1.0, 1.0), gfx.white)
    gfx.end_mesh(&g_opaqueTexturedTriangles)

    gfx.begin_mesh(&g_opaqueVertexColoredTriangles)
    gfx.append_quad(&g_opaqueVertexColoredTriangles, mat.v4_( 0.0, -1.0, 1.0, 1.0), gfx.red)
    gfx.append_quad(&g_opaqueVertexColoredTriangles, mat.v4_(-1.0,  0.0, 1.0, 1.0), gfx.green)
    gfx.end_mesh(&g_opaqueVertexColoredTriangles)

    gfx.begin_mesh(&g_opaqueVertexColoredLines)
    gfx.append_line(&g_opaqueVertexColoredLines, mat.v4_(-1.0, -1.0, 1.0,  1.0), gfx.white)
    gfx.append_line(&g_opaqueVertexColoredLines, mat.v4_(-1.0,  1.0, 1.0, -1.0), gfx.white)
    gfx.end_mesh(&g_opaqueVertexColoredLines)

    // alpha
    gfx.begin_mesh(&g_alphaVertexColoredTriangles)
    gfx.append_quad(&g_alphaVertexColoredTriangles, mat.v4_(-0.5, -0.5, 1.0, 1.0), mat.v4_(0.0, 0.0, 1.0, 0.5))
    gfx.end_mesh(&g_alphaVertexColoredTriangles)

    // opaque
	gfx.disable_blending()
    gfx.use_program(g_programTexture)
    if g_opaqueTexturedTriangles.index > 0 {
        gfx.assign_texture(0, g_albedoSampler, g_skycoinTexture)
        gfx.render_mesh(&g_opaqueTexturedTriangles)
    }

    gfx.use_program(g_programVertexColor)
    if (g_opaqueVertexColoredTriangles.index > 0) {
        gfx.render_mesh(&g_opaqueVertexColoredTriangles)
    }

    if g_opaqueVertexColoredLines.index > 0 {
        gfx.render_mesh(&g_opaqueVertexColoredLines)
    }

    // alpha
	gfx.enable_blending(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
    if g_alphaVertexColoredTriangles.index > 0 {
        gfx.render_mesh(&g_alphaVertexColoredTriangles)
    }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func render_menu(menu i32) () {
           if (menu == g_bootMenu) {
           render_boot_menu()
    } else if (menu == g_skycoinMenu) {
            render_skycoin_menu()
    } else if (menu == g_pumpcxMenu) {
            render_pumpcx_menu()
    } else if (menu == g_mainMenu) {
            render_main_menu()
    } else {
		uti.assert_(false, "render_menu::invalid menu index")
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func render_game() () {
	gfx.bind_framebuffer(g_target_0.framebuffer)
	gfx.clear(gl.COLOR_BUFFER_BIT, sky.black)
    if (gui.is_valid_menu(g_currentMenu)) {
        render_menu(g_currentMenu)
    }

	gfx.bind_framebuffer(g_target_1.framebuffer)
	gfx.clear(gl.COLOR_BUFFER_BIT, sky.black)
    if (gui.is_valid_menu(g_nextMenu)) {
        render_menu(g_nextMenu)
    }

    // fullscreen transition
	gfx.bind_framebuffer(0)
	gfx.clear(gl.COLOR_BUFFER_BIT, sky.black)

	gfx.disable_depth()
	gfx.disable_blending()

    gfx.use_program(g_programTrans_0)
    gfx.assign_texture(0, g_srcSampler, g_target_0.texture)
    gfx.assign_texture(1, g_dstSampler, g_target_1.texture)
    gfx.assign_float(g_timeUniform, f64.f32(g_transitionTime / g_transitionDuration))
    gfx.render_mesh(&g_fullscreenQuad)
}


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func main() {

    var targetFps f64 = 60.0D

    var window str // inline str init doesn't work
    window = "window"

	sky.init()
    app.init(window, "pumpcx", 800, 600, targetFps, 2, 1, "keyPressed")
    gfx.init(app.g_width, app.g_height)

    // programs
    g_programVertexColor = gfx.create_program("vsPassThrough", "psVertexColor")
    gfx.bind_attribute(g_programVertexColor, 0, "i_v3Position")
    gfx.bind_attribute(g_programVertexColor, 1, "i_v4Albedo")

    g_programTexture = gfx.create_program("vsPassThrough", "psTexture")
    gfx.bind_attribute(g_programTexture, 0, "i_v3Position")
    gfx.bind_attribute(g_programTexture, 1, "i_v4Albedo")
    gfx.bind_attribute(g_programTexture, 2, "i_v2Texcoord")
    g_albedoSampler = gfx.bind_texture(g_programTexture, "u_t2Albedo")

    g_programTrans_0 = gfx.create_program("vsPassThrough", "psTransition_0")
    gfx.bind_attribute(g_programTrans_0, 0, "i_v3Position")
    gfx.bind_attribute(g_programTrans_0, 2, "i_v2Texcoord")
    g_srcSampler = gfx.bind_texture(g_programTrans_0, "u_t2Src")
    g_dstSampler = gfx.bind_texture(g_programTrans_0, "u_t2Dst")
    g_timeUniform = gfx.bind_uniform(g_programTrans_0, "u_fTime")

    // textures
    g_skycoinTexture = gfx.create_texture("textures/Skycoin-Cloud-BW-Vertical-on_black@2x.png",
        gl.LINEAR, gl.LINEAR, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, 0, 0)

    // meshes
    var attributes [3]i32
    attributes = [3]i32{3, 4, 2} // can't use slice yet
    gfx.alloc_mesh(&g_opaqueVertexColoredTriangles, gl.TRIANGLES, attributes, 1024 * 3)
    gfx.alloc_mesh(&g_alphaVertexColoredTriangles, gl.TRIANGLES, attributes, 1024 * 3)
    gfx.alloc_mesh(&g_opaqueTexturedTriangles, gl.TRIANGLES, attributes, 1024 * 3)
    gfx.alloc_mesh(&g_opaqueVertexColoredLines, gl.LINES, attributes, 1024 * 2)
    gfx.alloc_mesh(&g_fullscreenQuad, gl.TRIANGLES, attributes, 6 * 3)

    gfx.begin_mesh(&g_fullscreenQuad)
    gfx.append_quad(&g_fullscreenQuad, mat.v4_(-1.0, 1.0, 2.0, -2.0), gfx.white)
    gfx.end_mesh(&g_fullscreenQuad)

    // targets
    g_target_0 = gfx.create_target(app.g_width, app.g_height)
    g_target_1 = gfx.create_target(app.g_width, app.g_height)

    // ##0 rewrite menu creation
    g_bootMenu = 0
    g_skycoinMenu = 1
    g_pumpcxMenu = 2
    g_mainMenu = 3
    g_nextMenu = 4

    // menus
    g_bootMenu = gui.create_menu("boot", "", 0.5D, -1, g_skycoinMenu)
    g_skycoinMenu = gui.create_menu("skycoin", "skycoin.png", 2.0D,  g_bootMenu, g_pumpcxMenu)
    g_pumpcxMenu = gui.create_menu("pumpcx", "", 2.0D,  g_skycoinMenu, g_mainMenu)
    g_mainMenu = gui.create_menu("main", "", -1.0D,  g_pumpcxMenu, g_mainMenu)
    g_nextMenu = g_bootMenu

    // main loop
    var fps fps.fps_s = fps.init(targetFps)
    for app.running(window) {
        fps = fps.begin_update(fps)
		app.begin_update(window)
        gui.update(fps.delta_time(&fps))
        render_game()
		app.end_update(window)
        fps = fps.end_update(fps)
    }

    gfx.free()

    printf("dumpcx\n")
}
