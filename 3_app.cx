//-----------------------------------------------------------------------------
// app
//-----------------------------------------------------------------------------
package app

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
import "glfw"
import "gui"
// ##1 remove when callbacks moved to gui

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
var app_width i32 = 800
var app_height i32 = 600
var app_exit bool = false

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func __process_keyboard(window str, key i32, scancode i32, action i32, mods i32) () { // ##1 move in gui when we can callback from another package than the calling expression
    gui.process_keyboard(window, key, scancode, action, mods)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func init(window str, name str, width i32, height i32, targetFps f64, major i32, minor i32, keyPressed str)() {

    app_width = width
    app_height = height

    printf("starting %s...\n", name)

    glfw.Init() // ##0 terminate
    glfw.WindowHint(glfw.Resizable, glfw.False)
    glfw.WindowHint(glfw.ContextVersionMajor, major)
    glfw.WindowHint(glfw.ContextVersionMinor, minor)
    glfw.CreateWindow(window, width, height, name)
    //glfw.SetWindowPos(window, 100, 100) //1500, 100)
    glfw.MakeContextCurrent(window)
    var swapInterval i32 = 0
    if targetFps > 0.0D {
        swapInterval = 1 // should be based on targetFps
    }
    glfw.SwapInterval(swapInterval)
    glfw.SetKeyCallback(window, "__process_keyboard")
    // xPos, yPos := glfw.GetCursorPos("window")
    // glfw.SetMouseButtonCallback("window", "mouseButton") --> Doesn't work yet
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func exit() {
    app_exit = true
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func running(window str) (value bool) {
    value = (glfw.ShouldClose(window) == false && app_exit == false)
}
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func begin_update(window str) {
    glfw.MakeContextCurrent(window)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func end_update(window str) {
     glfw.PollEvents()
    glfw.SwapBuffers(window)
}

